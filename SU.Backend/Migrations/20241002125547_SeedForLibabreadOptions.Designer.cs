// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SU.Backend.Database;

#nullable disable

namespace SU.Backend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241002125547_SeedForLibabreadOptions")]
    partial class SeedForLibabreadOptions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SU.Backend.Models.Customers.CompanyCustomer", b =>
                {
                    b.Property<int>("CompanyCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyCustomerId"), 1L, 1);

                    b.Property<string>("CompanyAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLandlineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyCustomerId");

                    b.ToTable("CompanyCustomers");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.PrivateCustomer", b =>
                {
                    b.Property<int>("PrivateCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateCustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivateCustomerId");

                    b.ToTable("PrivateCustomers");
                });

            modelBuilder.Entity("SU.Backend.Models.Employees.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("AgentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseSalary")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SU.Backend.Models.Employees.EmployeeRoleAssignment", b =>
                {
                    b.Property<int>("EmployeeRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeRoleAssignmentId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeRoleAssignmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRoleAssignments");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", b =>
                {
                    b.Property<int>("InsuranceCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceCoverageId"), 1L, 1);

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("InsuranceCoverageId");

                    b.HasIndex("InsuranceId")
                        .IsUnique();

                    b.ToTable("InsuranceCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.LiabilityCoverage", b =>
                {
                    b.Property<int>("LiabilityCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiabilityCoverageId"), 1L, 1);

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InsuranceCoverageId")
                        .HasColumnType("int");

                    b.Property<int>("LiabilityCoverageOptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LiabilityCoverageId");

                    b.HasIndex("InsuranceCoverageId")
                        .IsUnique();

                    b.HasIndex("LiabilityCoverageOptionId");

                    b.ToTable("LiabilityCoverage");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.LiabilityCoverageOption", b =>
                {
                    b.Property<int>("LiabilityCoverageOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiabilityCoverageOptionId"), 1L, 1);

                    b.Property<string>("Deductible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OptionAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LiabilityCoverageOptionId");

                    b.ToTable("LiabilityCoverageOption");

                    b.HasData(
                        new
                        {
                            LiabilityCoverageOptionId = 1,
                            Deductible = "Quarter",
                            MonthlyPremium = 800m,
                            OptionAmount = "ThreeMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 2,
                            Deductible = "Quarter",
                            MonthlyPremium = 1300m,
                            OptionAmount = "FiveMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 3,
                            Deductible = "Quarter",
                            MonthlyPremium = 1800m,
                            OptionAmount = "TenMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 4,
                            Deductible = "Half",
                            MonthlyPremium = 700m,
                            OptionAmount = "ThreeMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 5,
                            Deductible = "Half",
                            MonthlyPremium = 1200m,
                            OptionAmount = "FiveMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 6,
                            Deductible = "Half",
                            MonthlyPremium = 1700m,
                            OptionAmount = "TenMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 7,
                            Deductible = "ThreeQuarter",
                            MonthlyPremium = 600m,
                            OptionAmount = "ThreeMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 8,
                            Deductible = "ThreeQuarter",
                            MonthlyPremium = 1100m,
                            OptionAmount = "FiveMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 9,
                            Deductible = "ThreeQuarter",
                            MonthlyPremium = 1600m,
                            OptionAmount = "TenMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 10,
                            Deductible = "Full",
                            MonthlyPremium = 500m,
                            OptionAmount = "ThreeMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 11,
                            Deductible = "Full",
                            MonthlyPremium = 900m,
                            OptionAmount = "FiveMillion"
                        },
                        new
                        {
                            LiabilityCoverageOptionId = 12,
                            Deductible = "Full",
                            MonthlyPremium = 1400m,
                            OptionAmount = "TenMillion"
                        });
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PrivateCoverage", b =>
                {
                    b.Property<int>("PrivateCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateCoverageId"), 1L, 1);

                    b.Property<int>("InsuranceCoverageId")
                        .HasColumnType("int");

                    b.Property<int>("InsuredPersonId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateCoverageOptionId")
                        .HasColumnType("int");

                    b.HasKey("PrivateCoverageId");

                    b.HasIndex("InsuranceCoverageId")
                        .IsUnique();

                    b.HasIndex("InsuredPersonId");

                    b.HasIndex("PrivateCoverageOptionId");

                    b.ToTable("PrivateCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PrivateCoverageOption", b =>
                {
                    b.Property<int>("PrivateCoverageOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateCoverageOptionId"), 1L, 1);

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrivateCoverageOptionId");

                    b.ToTable("PrivateCoverageOption");

                    b.HasData(
                        new
                        {
                            PrivateCoverageOptionId = 1,
                            CoverageAmount = 700000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 350m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 2,
                            CoverageAmount = 900000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 450m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 3,
                            CoverageAmount = 1100000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 550m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 4,
                            CoverageAmount = 1300000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 650m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 5,
                            CoverageAmount = 750000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 375m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 6,
                            CoverageAmount = 950000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 475m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 7,
                            CoverageAmount = 1150000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 575m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 8,
                            CoverageAmount = 1350000m,
                            InsuranceType = "ChildAccidentAndHealthInsurance",
                            MonthlyPremium = 675m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 9,
                            CoverageAmount = 300000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 150m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 10,
                            CoverageAmount = 400000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 200m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 11,
                            CoverageAmount = 500000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 250m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 12,
                            CoverageAmount = 350000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 175m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 13,
                            CoverageAmount = 450000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 225m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 14,
                            CoverageAmount = 550000m,
                            InsuranceType = "AdultAccidentAndHealthInsurance",
                            MonthlyPremium = 275m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 15,
                            CoverageAmount = 300000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 150m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 16,
                            CoverageAmount = 400000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 200m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 17,
                            CoverageAmount = 500000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 250m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 18,
                            CoverageAmount = 350000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 175m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 19,
                            CoverageAmount = 450000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 225m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PrivateCoverageOptionId = 20,
                            CoverageAmount = 550000m,
                            InsuranceType = "AdultLifeInsurance",
                            MonthlyPremium = 275m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PropertyAndInventoryCoverage", b =>
                {
                    b.Property<int>("PropertyAndInventoryCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyAndInventoryCoverageId"), 1L, 1);

                    b.Property<int>("InsuranceCoverageId")
                        .HasColumnType("int");

                    b.Property<decimal>("InventoryPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InventoryValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PropertyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PropertyValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PropertyAndInventoryCoverageId");

                    b.HasIndex("InsuranceCoverageId")
                        .IsUnique();

                    b.ToTable("PropertyAndInventoryCoverage");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.Riskzone", b =>
                {
                    b.Property<int>("RiskzoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskzoneId"), 1L, 1);

                    b.Property<string>("RiskzoneLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ZoneFactor")
                        .HasColumnType("float");

                    b.HasKey("RiskzoneId");

                    b.ToTable("Riskzones");

                    b.HasData(
                        new
                        {
                            RiskzoneId = 1,
                            RiskzoneLevel = "Zone1",
                            ZoneFactor = 1.3
                        },
                        new
                        {
                            RiskzoneId = 2,
                            RiskzoneLevel = "Zone2",
                            ZoneFactor = 1.2
                        },
                        new
                        {
                            RiskzoneId = 3,
                            RiskzoneLevel = "Zone3",
                            ZoneFactor = 1.1000000000000001
                        },
                        new
                        {
                            RiskzoneId = 4,
                            RiskzoneLevel = "Zone4",
                            ZoneFactor = 1.0
                        });
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceCoverage", b =>
                {
                    b.Property<int>("VehicleInsuranceCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleInsuranceCoverageId"), 1L, 1);

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InsuranceCoverageId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RiskzoneId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleInsuranceOptionId")
                        .HasColumnType("int");

                    b.HasKey("VehicleInsuranceCoverageId");

                    b.HasIndex("InsuranceCoverageId")
                        .IsUnique();

                    b.HasIndex("RiskzoneId");

                    b.HasIndex("VehicleInsuranceOptionId");

                    b.ToTable("VehicleInsuranceCoverage");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceOption", b =>
                {
                    b.Property<int>("VehicleInsuranceOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleInsuranceOptionId"), 1L, 1);

                    b.Property<decimal>("Deductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OptionCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OptionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleInsuranceOptionId");

                    b.ToTable("VehicleInsuranceOptions");

                    b.HasData(
                        new
                        {
                            VehicleInsuranceOptionId = 1,
                            Deductible = 1000m,
                            OptionCost = 350m,
                            OptionDescription = "Traffic"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 2,
                            Deductible = 1000m,
                            OptionCost = 550m,
                            OptionDescription = "Half"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 3,
                            Deductible = 1000m,
                            OptionCost = 800m,
                            OptionDescription = "Full"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 4,
                            Deductible = 2000m,
                            OptionCost = 300m,
                            OptionDescription = "Traffic"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 5,
                            Deductible = 2000m,
                            OptionCost = 450m,
                            OptionDescription = "Half"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 6,
                            Deductible = 2000m,
                            OptionCost = 700m,
                            OptionDescription = "Full"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 7,
                            Deductible = 3500m,
                            OptionCost = 250m,
                            OptionDescription = "Traffic"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 8,
                            Deductible = 3500m,
                            OptionCost = 400m,
                            OptionDescription = "Half"
                        },
                        new
                        {
                            VehicleInsuranceOptionId = 9,
                            Deductible = 3500m,
                            OptionCost = 600m,
                            OptionDescription = "Full"
                        });
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePolicyHolderId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Premium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InsuranceId");

                    b.HasIndex("InsurancePolicyHolderId");

                    b.HasIndex("SellerId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsuranceAddon", b =>
                {
                    b.Property<int>("InsuranceAddonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceAddonId"), 1L, 1);

                    b.Property<int>("InsuranceAddonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("InsuranceAddonId");

                    b.HasIndex("InsuranceAddonTypeId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceAddons");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsuranceAddonType", b =>
                {
                    b.Property<int>("InsuranceAddonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceAddonTypeId"), 1L, 1);

                    b.Property<decimal>("BaseExtraPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuranceAddonTypeId");

                    b.ToTable("InsuranceAddonTypes");

                    b.HasData(
                        new
                        {
                            InsuranceAddonTypeId = 1,
                            BaseExtraPremium = 3.0000m,
                            CoverageAmount = 100000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 2,
                            BaseExtraPremium = 6.0000m,
                            CoverageAmount = 200000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 3,
                            BaseExtraPremium = 9.0000m,
                            CoverageAmount = 300000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 4,
                            BaseExtraPremium = 12.0000m,
                            CoverageAmount = 400000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 5,
                            BaseExtraPremium = 15.0000m,
                            CoverageAmount = 500000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 6,
                            BaseExtraPremium = 18.0000m,
                            CoverageAmount = 600000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 7,
                            BaseExtraPremium = 21.0000m,
                            CoverageAmount = 700000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 8,
                            BaseExtraPremium = 24.0000m,
                            CoverageAmount = 800000m,
                            Description = "SicknessAccident"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 9,
                            BaseExtraPremium = 0.2500m,
                            CoverageAmount = 500m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 10,
                            BaseExtraPremium = 0.5000m,
                            CoverageAmount = 1000m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 11,
                            BaseExtraPremium = 0.7500m,
                            CoverageAmount = 1500m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 12,
                            BaseExtraPremium = 1.0000m,
                            CoverageAmount = 2000m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 13,
                            BaseExtraPremium = 1.2500m,
                            CoverageAmount = 2500m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 14,
                            BaseExtraPremium = 1.5000m,
                            CoverageAmount = 3000m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 15,
                            BaseExtraPremium = 1.7500m,
                            CoverageAmount = 3500m,
                            Description = "LongTermSickness"
                        },
                        new
                        {
                            InsuranceAddonTypeId = 16,
                            BaseExtraPremium = 2.0000m,
                            CoverageAmount = 4000m,
                            Description = "LongTermSickness"
                        });
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsurancePolicyHolder", b =>
                {
                    b.Property<int>("InsurancePolicyHolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsurancePolicyHolderId"), 1L, 1);

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateCustomerId")
                        .HasColumnType("int");

                    b.HasKey("InsurancePolicyHolderId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("PrivateCustomerId");

                    b.ToTable("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsuredPerson", b =>
                {
                    b.Property<int>("InsuredPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuredPersonId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuredPersonId");

                    b.ToTable("InsuredPersons");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Prospects.Prospect", b =>
                {
                    b.Property<int>("ProspectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProspectId"), 1L, 1);

                    b.Property<string>("AssignedAgentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrivateCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ProspectStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProspectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("ProspectId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("PrivateCustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Prospects");
                });

            modelBuilder.Entity("SU.Backend.Models.Employees.Employee", b =>
                {
                    b.HasOne("SU.Backend.Models.Employees.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SU.Backend.Models.Employees.EmployeeRoleAssignment", b =>
                {
                    b.HasOne("SU.Backend.Models.Employees.Employee", "Employee")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.Insurance", "Insurance")
                        .WithOne("InsuranceCoverage")
                        .HasForeignKey("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", "InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.LiabilityCoverage", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", "InsuranceCoverage")
                        .WithOne("LiabilityCoverage")
                        .HasForeignKey("SU.Backend.Models.Insurances.Coverage.LiabilityCoverage", "InsuranceCoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.Coverage.LiabilityCoverageOption", "LiabilityCoverageOption")
                        .WithMany("LiabilityCoverages")
                        .HasForeignKey("LiabilityCoverageOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCoverage");

                    b.Navigation("LiabilityCoverageOption");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PrivateCoverage", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", "InsuranceCoverage")
                        .WithOne("PrivateCoverage")
                        .HasForeignKey("SU.Backend.Models.Insurances.Coverage.PrivateCoverage", "InsuranceCoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.InsuredPerson", "InsuredPerson")
                        .WithMany("PrivateCoverages")
                        .HasForeignKey("InsuredPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.Coverage.PrivateCoverageOption", "PrivateCoverageOption")
                        .WithMany("PrivateCoverages")
                        .HasForeignKey("PrivateCoverageOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCoverage");

                    b.Navigation("InsuredPerson");

                    b.Navigation("PrivateCoverageOption");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PropertyAndInventoryCoverage", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", "InsuranceCoverage")
                        .WithOne("PropertyAndInventoryCoverage")
                        .HasForeignKey("SU.Backend.Models.Insurances.Coverage.PropertyAndInventoryCoverage", "InsuranceCoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceCoverage");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceCoverage", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", "InsuranceCoverage")
                        .WithOne("VehicleInsuranceCoverage")
                        .HasForeignKey("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceCoverage", "InsuranceCoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.Coverage.Riskzone", "Riskzone")
                        .WithMany("VehicleInsuranceCoverages")
                        .HasForeignKey("RiskzoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceOption", "VehicleInsuranceOption")
                        .WithMany("VehicleInsuranceCoverages")
                        .HasForeignKey("VehicleInsuranceOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCoverage");

                    b.Navigation("Riskzone");

                    b.Navigation("VehicleInsuranceOption");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Insurance", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.InsurancePolicyHolder", "InsurancePolicyHolder")
                        .WithMany("Insurances")
                        .HasForeignKey("InsurancePolicyHolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Employees.Employee", "Seller")
                        .WithMany("Insurances")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicyHolder");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsuranceAddon", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurances.InsuranceAddonType", "InsuranceAddonType")
                        .WithMany()
                        .HasForeignKey("InsuranceAddonTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurances.Insurance", "Insurance")
                        .WithMany("InsuranceAddons")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("InsuranceAddonType");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsurancePolicyHolder", b =>
                {
                    b.HasOne("SU.Backend.Models.Customers.CompanyCustomer", "CompanyCustomer")
                        .WithMany("InsurancePolicyHolders")
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SU.Backend.Models.Customers.PrivateCustomer", "PrivateCustomer")
                        .WithMany("InsurancePolicyHolders")
                        .HasForeignKey("PrivateCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("PrivateCustomer");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Prospects.Prospect", b =>
                {
                    b.HasOne("SU.Backend.Models.Customers.CompanyCustomer", "CompanyCustomer")
                        .WithMany()
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SU.Backend.Models.Customers.PrivateCustomer", "PrivateCustomer")
                        .WithMany()
                        .HasForeignKey("PrivateCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SU.Backend.Models.Employees.Employee", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("PrivateCustomer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.CompanyCustomer", b =>
                {
                    b.Navigation("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.PrivateCustomer", b =>
                {
                    b.Navigation("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Employees.Employee", b =>
                {
                    b.Navigation("Insurances");

                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.InsuranceCoverage", b =>
                {
                    b.Navigation("LiabilityCoverage");

                    b.Navigation("PrivateCoverage");

                    b.Navigation("PropertyAndInventoryCoverage");

                    b.Navigation("VehicleInsuranceCoverage");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.LiabilityCoverageOption", b =>
                {
                    b.Navigation("LiabilityCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.PrivateCoverageOption", b =>
                {
                    b.Navigation("PrivateCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.Riskzone", b =>
                {
                    b.Navigation("VehicleInsuranceCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Coverage.VehicleInsuranceOption", b =>
                {
                    b.Navigation("VehicleInsuranceCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.Insurance", b =>
                {
                    b.Navigation("InsuranceAddons");

                    b.Navigation("InsuranceCoverage")
                        .IsRequired();
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsurancePolicyHolder", b =>
                {
                    b.Navigation("Insurances");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurances.InsuredPerson", b =>
                {
                    b.Navigation("PrivateCoverages");
                });
#pragma warning restore 612, 618
        }
    }
}
