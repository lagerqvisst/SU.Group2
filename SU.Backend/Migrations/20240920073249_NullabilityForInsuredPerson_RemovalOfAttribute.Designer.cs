// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SU.Backend.Database;

#nullable disable

namespace SU.Backend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240920073249_NullabilityForInsuredPerson_RemovalOfAttribute")]
    partial class NullabilityForInsuredPerson_RemovalOfAttribute
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SU.Backend.Models.Customers.CompanyCustomer", b =>
                {
                    b.Property<int>("CompanyCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyCustomerId"), 1L, 1);

                    b.Property<string>("CompanyAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLandlineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyCustomerId");

                    b.ToTable("CompanyCustomer");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.PrivateCustomer", b =>
                {
                    b.Property<int>("PrivateCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateCustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivateCustomerId");

                    b.ToTable("PrivateCustomers");
                });

            modelBuilder.Entity("SU.Backend.Models.Employee.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("AgentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseSalary")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ManagerEmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SU.Backend.Models.Employee.EmployeeRoleAssignment", b =>
                {
                    b.Property<int>("EmployeeRoleAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeRoleAssignmentId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeRoleAssignmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRoleAssignments");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsuranceAddon", b =>
                {
                    b.Property<int>("InsuranceAddonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceAddonId"), 1L, 1);

                    b.Property<decimal>("ExtraPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceAddonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LongTermSicknessOption")
                        .HasColumnType("int");

                    b.Property<int>("PrivateInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("SicknessAccidentOption")
                        .HasColumnType("int");

                    b.HasKey("InsuranceAddonId");

                    b.HasIndex("PrivateInsuranceId");

                    b.ToTable("InsuranceAddons");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsuranceCoverage", b =>
                {
                    b.Property<int>("InsuranceCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceCoverageId"), 1L, 1);

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyPremium")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InsuranceCoverageId");

                    b.ToTable("InsuranceCoverages");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsurancePolicyHolder", b =>
                {
                    b.Property<int>("InsurancePolicyHolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsurancePolicyHolderId"), 1L, 1);

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateCustomerId")
                        .HasColumnType("int");

                    b.HasKey("InsurancePolicyHolderId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("PrivateCustomerId");

                    b.ToTable("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsuredPerson", b =>
                {
                    b.Property<int>("InsuredPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuredPersonId"), 1L, 1);

                    b.Property<int?>("InsurancePolicyHolderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuredPersonId");

                    b.HasIndex("InsurancePolicyHolderId");

                    b.ToTable("InsuredPersons");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.PrivateInsurance", b =>
                {
                    b.Property<int>("PrivateInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivateInsuranceId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceCoverageId")
                        .HasColumnType("int");

                    b.Property<int>("InsurancePolicyHolderNr")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuredPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrivateInsuranceId");

                    b.HasIndex("InsuranceCoverageId");

                    b.HasIndex("InsurancePolicyHolderNr");

                    b.HasIndex("InsuredPersonId");

                    b.ToTable("PrivateInsurances");
                });

            modelBuilder.Entity("SU.Backend.Models.Employee.Employee", b =>
                {
                    b.HasOne("SU.Backend.Models.Employee.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerEmployeeId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SU.Backend.Models.Employee.EmployeeRoleAssignment", b =>
                {
                    b.HasOne("SU.Backend.Models.Employee.Employee", "Employee")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsuranceAddon", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurance.PrivateInsurance", "PrivateInsurance")
                        .WithMany("InsuranceAddons")
                        .HasForeignKey("PrivateInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateInsurance");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsurancePolicyHolder", b =>
                {
                    b.HasOne("SU.Backend.Models.Customers.CompanyCustomer", "CompanyCustomer")
                        .WithMany("InsurancePolicyHolders")
                        .HasForeignKey("CompanyCustomerId");

                    b.HasOne("SU.Backend.Models.Customers.PrivateCustomer", "PrivateCustomer")
                        .WithMany("InsurancePolicyHolders")
                        .HasForeignKey("PrivateCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("PrivateCustomer");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.InsuredPerson", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurance.InsurancePolicyHolder", "InsurancePolicyHolder")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyHolderId");

                    b.Navigation("InsurancePolicyHolder");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.PrivateInsurance", b =>
                {
                    b.HasOne("SU.Backend.Models.Insurance.InsuranceCoverage", "InsuranceCoverage")
                        .WithMany()
                        .HasForeignKey("InsuranceCoverageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurance.InsurancePolicyHolder", "InsurancePolicyHolder")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyHolderNr")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SU.Backend.Models.Insurance.InsuredPerson", "InsuredPerson")
                        .WithMany()
                        .HasForeignKey("InsuredPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InsuranceCoverage");

                    b.Navigation("InsurancePolicyHolder");

                    b.Navigation("InsuredPerson");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.CompanyCustomer", b =>
                {
                    b.Navigation("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Customers.PrivateCustomer", b =>
                {
                    b.Navigation("InsurancePolicyHolders");
                });

            modelBuilder.Entity("SU.Backend.Models.Employee.Employee", b =>
                {
                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("SU.Backend.Models.Insurance.PrivateInsurance", b =>
                {
                    b.Navigation("InsuranceAddons");
                });
#pragma warning restore 612, 618
        }
    }
}
